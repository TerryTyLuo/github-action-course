name: Job Artifacts and Output - Demo1
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # the outputs key allows us to define any outputs
    # as many outputs as we want
    outputs:
      script-file: ${{ steps.publish.outputs.step-output-script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
        # the build job will produce some assets
      - name: Build website
        run: npm run build
        # output the file name
      - name: Publish js filename
        # must specify a unique ID for the step so the context value can access
        id: publish
        # in step 1, we set up a value name (not necessarily to be the output name set above)
        # the name here will be the step output name
        # and then target a special file created by GitHub in the env where your job runs
        # and where the output key-value pairs will be written into
        run: find dist/assets/*.js -type f -execdir echo 'step-output-script-file={}' >> $GITHUB_OUTPUT ';'

        # an alternative way which was used IN THE PAST is to set up the echo command
        # will NOT be supported in the future
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'

        # it would be greate if we can store the outputs
        # can use an Action (an official Action)
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            dist
         #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # it downloads the artifacts produced by previous actions
      # which necessitates the "needs" as it must run AFTER the build job
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        # specify the artifacts
        with:
          # same name used in build job
          # it loses the dist-files folder and all the files under the folder are directly accessible
          name: dist-files
      - name: Output contents
        run: ls
        # use "needs" to access the pre-requisite jobs (in this case is the "build" job)
        # then outputs, script-file
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
